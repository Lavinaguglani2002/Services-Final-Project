{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Allied\\\\Desktop\\\\Serviceproject\\\\client\\\\src\\\\Admin\\\\Getorders.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n\n// const Getorders = () => {\n//   const [orders, setOrders] = useState([]);\n//   const [message, setMessage] = useState('');\n//   const [selectedEmail, setSelectedEmail] = useState([]);\n\n//   useEffect(() => {\n//     getAllOrders();\n//   }, []);\n\n//   const getAllOrders = async () => {\n//     try {\n//       const res = await fetch('http://localhost:8000/getorders', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//       });\n//       const data = await res.json();\n//       setOrders(data.orders || []);\n//       setSelectedEmail('');\n//     } catch (err) {\n//       console.log('Error:', err);\n//     }\n//   };\n\n//   const getOrdersByEmail = async (email) => {\n//     try {\n//       const res = await fetch(`http://localhost:8000/ordersbyemail/${email}`, {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//       });\n//       const data = await res.json();\n//       setOrders(data.orders || []);\n//       setSelectedEmail(email);\n//     } catch (err) {\n//       console.log('Error:', err);\n//     }\n//   };\n\n//   // const updateStatus = async (id, status) => {\n//   //   try {\n//   //     const res = await fetch('http://localhost:8000/updateorderstatus', {\n//   //       method: 'PUT',\n//   //       headers: { 'Content-Type': 'application/json' },\n//   //       body: JSON.stringify({ orderId: id, deliveryStatus: status }),\n//   //     });\n//   //     const data = await res.json();\n\n//   //     if (res.ok) {\n//   //       setMessage(`Order ${status} successfully!`);\n//   //       setOrders((prev) =>\n//   //         prev.map((order) =>\n//   //           order._id === id ? { ...order, deliveryStatus: status } : order\n//   //         )\n//   //       );\n//   //     } else {\n//   //       setMessage(data.message || 'Failed to update.');\n//   //     }\n//   //   } catch (err) {\n//   //     console.log('Error:', err);\n//   //   }\n//   // };\n\n// //handle proceedd\n\n// const handleReject = async (orderId) => {\n//   await fetch(`http://localhost:8000/updateorder/${orderId}`, {\n//     method: \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body: JSON.stringify({ deliveryStatus: \"Rejected\" })\n//   });\n//   getAllOrders();\n// };\n\n// const handleProceed = async (orderId, orderDate) => {\n//   const choice = window.prompt(\"Choose Delivery Type: fast / normal\")?.toLowerCase();\n//   let deliveryDate = new Date(orderDate);\n\n//   if (choice === \"fast\") deliveryDate.setDate(deliveryDate.getDate() + 3);\n//   else if (choice === \"normal\") deliveryDate.setDate(deliveryDate.getDate() + 7);\n//   else return alert(\"Invalid choice\");\n\n//   await fetch(`http://localhost:8000/updateorder/${orderId}`, {\n//     method: \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body: JSON.stringify({\n//       deliveryStatus: \"Shipped\",\n//       deliveryDate\n//     })\n//   });\n//   getAllOrders();\n// };\n\n//   // Get unique user emails from orders\n//   const uniqueEmails = [...new Set(orders.map(order => order.userId?.email).filter(Boolean))];\n\n//   return (\n//     <div className=\"container mt-4\">\n//       <h2>{selectedEmail ? `Orders of ${selectedEmail}` : 'All Orders'}</h2>\n\n//       {selectedEmail && (\n//         <button className=\"btn btn-secondary mb-3\" onClick={getAllOrders}>\n//           ← Back\n//         </button>\n//       )}\n\n//       {!selectedEmail && uniqueEmails.length > 0 && (\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\"><b>Select by Email:</b></label>\n//           <select\n//             className=\"form-select\"\n//             value={selectedEmail}\n//             onChange={(e) => getOrdersByEmail(e.target.value)}\n//           >\n//             <option value=\"\">-- Select an email --</option>\n//             {uniqueEmails.map((email) => (\n//               <option key={email} value={email}>{email}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       {message && <div className=\"alert alert-info\">{message}</div>}\n\n//       {orders.length === 0 ? (\n//         <p>No orders found.</p>\n//       ) : (\n//         orders.map((order, index) => (\n//           <div key={order._id} className=\"card mb-3 p-3 shadow-sm\">\n//             <p><b>Service:</b> Order {index + 1} - {order.serviceName}</p>\n//             <p><b>Date & Time:</b> {new Date(order.serviceDate).toLocaleString()}</p>\n//         <p>   <strong>Status:</strong>{order.deliveryStatus}</p> \n//         <p><strong>Delivery Date:</strong>{new Date (order.deliveryDate).toLocaleDateString()}</p>\n//             <p><b>Amount:</b> ₹{order.totalAmount}</p>\n\n//             <p>\n//               <b>User:</b> {order.userId?.name || 'N/A'} (\n//               <span\n//                 style={{ color: 'blue', cursor: 'pointer' }}\n//                 onClick={() => getOrdersByEmail(order.userId?.email)}\n//               >\n//                 {order.userId?.email || 'N/A'}\n//               </span>\n//               )\n//             </p>\n//             <p><b>Status:</b> {order.deliveryStatus}</p>\n\n//             {order.deliveryStatus === 'Pending' ? (\n//               <div className=\"d-flex gap-2\">\n//                 <button className=\"btn btn-success btn-sm\" onClick={() => handleReject(order._id, 'Approved')}>\n//                   Approve\n//                 </button>\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => handleReject(order._id, 'Rejected')}\n//                   disabled={order.deliveryStatus === 'Rejected'}>\n//                   Reject\n//                 </button>\n//               </div>\n//             ) : (\n//               <span className={`badge ${order.deliveryStatus === 'Approved' ? 'bg-success' : 'bg-danger'}`}>\n//                 {order.deliveryStatus}\n//               </span>\n//             )}\n//             <button className='btn btn-success' onClick={()=>handleProceed(order._id,order.serviceDate)}\n//               disabled={order.deliveryStatus===\"Shipped\" || order.deliveryStatus===\"Rejected\"}>\n\n//             </button>\n\n//             <ul className=\"order-items mt-2\">\n//               {order.cartItems.map((item, idx) => (\n//                 <li key={idx} className=\"mb-1\">\n//                   <strong>{item.name}</strong> - ₹{item.price} x {item.quantity}\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         ))\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Getorders;\n\nimport React, { useEffect, useState } from 'react';\nimport api from '../axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Getorders = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [message, setMessage] = useState('');\n  const [selectedEmail, setSelectedEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [loadingOrderId, setLoadingOrderId] = useState('');\n  useEffect(() => {\n    getAllOrders();\n  }, []);\n  const getAllOrders = async () => {\n    try {\n      // Use axios to get all orders\n      const res = await api.get('/getorders');\n\n      // Set the orders state with the data from the response\n      setOrders(res.data.orders || []);\n      setSelectedEmail('');\n    } catch (err) {\n      console.log(\"Error:\", err); // Handle error\n    }\n  };\n  const getOrdersByEmail = async email => {\n    try {\n      // Use axios to get the orders by email\n      const res = await api.get(`/ordersbyemail/${email}`);\n\n      // Set the orders state with the data from the response\n      setOrders(res.data.orders || []);\n      setSelectedEmail(email);\n    } catch (err) {\n      console.log(\"Error:\", err); // Handle error\n    }\n  };\n  const handleReject = async orderId => {\n    setLoadingOrderId(orderId);\n    try {\n      // Use axios to send the PUT request\n      await api.put(`/updateorder/${orderId}`, {\n        deliveryStatus: 'Rejected'\n      });\n\n      // Call the function to get all orders after the update\n      await getAllOrders();\n    } catch (error) {\n      console.error(\"Error rejecting the order:\", error); // Handle error\n    }\n    setLoadingOrderId(null);\n  };\n  const handleProceed = async (orderId, orderDate, deliveryStatus) => {\n    setLoadingOrderId(orderId);\n    let deliveryDate = new Date(orderDate);\n    if (deliveryStatus === 'fast') {\n      deliveryDate.setDate(deliveryDate.getDate() + 2);\n    } else {\n      deliveryDate.setDate(deliveryDate.getDate() + 4);\n    }\n    try {\n      // Use axios to send the PUT request\n      await api.put(`/updateorder/${orderId}`, {\n        deliveryStatus: 'Shipped',\n        deliveryDate\n      });\n\n      // Call the function to get all orders after the update\n      await getAllOrders();\n    } catch (error) {\n      console.error(\"Error updating the order:\", error); // Handle error\n    }\n    setLoadingOrderId(null);\n  };\n  const uniqueEmails = [...new Set(orders.map(order => {\n    var _order$userId;\n    return (_order$userId = order.userId) === null || _order$userId === void 0 ? void 0 : _order$userId.email;\n  }).filter(Boolean))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedEmail ? `Orders of ${selectedEmail}` : 'All Orders'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), selectedEmail && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-secondary mb-3\",\n      onClick: getAllOrders,\n      children: \"\\u2190 Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this), !selectedEmail && uniqueEmails.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Select by Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select\",\n        value: selectedEmail,\n        onChange: e => getOrdersByEmail(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select an email --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), uniqueEmails.map(email => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: email,\n          children: email\n        }, email, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center md-3 text-white\",\n        children: \"Please Wait\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 19\n    }, this), orders.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No orders found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this) : orders.map((order, index) => {\n      var _order$userId2, _order$userId4;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mb-3 p-3 shadow-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Service:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 16\n          }, this), \" Order \", index + 1, \" - \", order.serviceName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Date & Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 16\n          }, this), \" \", new Date(order.serviceDate).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 16\n          }, this), \" \", order.deliveryStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Delivery Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 16\n          }, this), \" \", order.deliveryDate ? new Date(order.deliveryDate).toLocaleDateString() : 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 16\n          }, this), \" \\u20B9\", order.totalAmount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"User:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), \" \", ((_order$userId2 = order.userId) === null || _order$userId2 === void 0 ? void 0 : _order$userId2.name) || 'N/A', \" (\", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'blue',\n              cursor: 'pointer'\n            },\n            onClick: () => {\n              var _order$userId3;\n              return getOrdersByEmail((_order$userId3 = order.userId) === null || _order$userId3 === void 0 ? void 0 : _order$userId3.email);\n            },\n            children: ((_order$userId4 = order.userId) === null || _order$userId4 === void 0 ? void 0 : _order$userId4.email) || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), order.deliveryStatus === 'Pending' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success btn-sm\",\n            onClick: () => handleProceed(order._id, order.serviceDate, order.deliveryStatus),\n            disabled: loadingOrderId === order._id || order.deliveryStatus === \"Shipped\",\n            children: loadingOrderId === order._id ? 'Processing...' : 'Approve'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger btn-sm\",\n            onClick: () => handleReject(order._id),\n            disabled: loadingOrderId === order._id || order.deliveryStatus === \"Rejected\",\n            children: loadingOrderId === order._id ? 'Rejecting...' : 'Reject'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 15\n        }, this), order.deliveryStatus !== 'Pending' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `badge ${order.deliveryStatus === 'Shipped' ? 'bg-success' : 'bg-danger'}`,\n          children: order.deliveryStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"order-items mt-2\",\n          children: order.cartItems.map((item, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this), \" - \\u20B9\", item.price, \" x \", item.quantity]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this)]\n      }, order._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n};\n_s(Getorders, \"HFd95De7ynma/J/Un0kZEHwAhOo=\");\n_c = Getorders;\nexport default Getorders;\nvar _c;\n$RefreshReg$(_c, \"Getorders\");","map":{"version":3,"names":["React","useEffect","useState","api","jsxDEV","_jsxDEV","Getorders","_s","orders","setOrders","message","setMessage","selectedEmail","setSelectedEmail","loading","setLoading","loadingOrderId","setLoadingOrderId","getAllOrders","res","get","data","err","console","log","getOrdersByEmail","email","handleReject","orderId","put","deliveryStatus","error","handleProceed","orderDate","deliveryDate","Date","setDate","getDate","uniqueEmails","Set","map","order","_order$userId","userId","filter","Boolean","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","value","onChange","e","target","index","_order$userId2","_order$userId4","serviceName","serviceDate","toLocaleString","toLocaleDateString","totalAmount","name","style","color","cursor","_order$userId3","_id","disabled","cartItems","item","idx","price","quantity","_c","$RefreshReg$"],"sources":["C:/Users/Allied/Desktop/Serviceproject/client/src/Admin/Getorders.js"],"sourcesContent":["\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// const Getorders = () => {\r\n//   const [orders, setOrders] = useState([]);\r\n//   const [message, setMessage] = useState('');\r\n//   const [selectedEmail, setSelectedEmail] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     getAllOrders();\r\n//   }, []);\r\n\r\n//   const getAllOrders = async () => {\r\n//     try {\r\n//       const res = await fetch('http://localhost:8000/getorders', {\r\n//         method: 'GET',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//       });\r\n//       const data = await res.json();\r\n//       setOrders(data.orders || []);\r\n//       setSelectedEmail('');\r\n//     } catch (err) {\r\n//       console.log('Error:', err);\r\n//     }\r\n//   };\r\n\r\n//   const getOrdersByEmail = async (email) => {\r\n//     try {\r\n//       const res = await fetch(`http://localhost:8000/ordersbyemail/${email}`, {\r\n//         method: 'GET',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//       });\r\n//       const data = await res.json();\r\n//       setOrders(data.orders || []);\r\n//       setSelectedEmail(email);\r\n//     } catch (err) {\r\n//       console.log('Error:', err);\r\n//     }\r\n//   };\r\n\r\n//   // const updateStatus = async (id, status) => {\r\n//   //   try {\r\n//   //     const res = await fetch('http://localhost:8000/updateorderstatus', {\r\n//   //       method: 'PUT',\r\n//   //       headers: { 'Content-Type': 'application/json' },\r\n//   //       body: JSON.stringify({ orderId: id, deliveryStatus: status }),\r\n//   //     });\r\n//   //     const data = await res.json();\r\n\r\n//   //     if (res.ok) {\r\n//   //       setMessage(`Order ${status} successfully!`);\r\n//   //       setOrders((prev) =>\r\n//   //         prev.map((order) =>\r\n//   //           order._id === id ? { ...order, deliveryStatus: status } : order\r\n//   //         )\r\n//   //       );\r\n//   //     } else {\r\n//   //       setMessage(data.message || 'Failed to update.');\r\n//   //     }\r\n//   //   } catch (err) {\r\n//   //     console.log('Error:', err);\r\n//   //   }\r\n//   // };\r\n\r\n\r\n// //handle proceedd\r\n\r\n\r\n// const handleReject = async (orderId) => {\r\n//   await fetch(`http://localhost:8000/updateorder/${orderId}`, {\r\n//     method: \"PUT\",\r\n//     headers: { \"Content-Type\": \"application/json\" },\r\n//     body: JSON.stringify({ deliveryStatus: \"Rejected\" })\r\n//   });\r\n//   getAllOrders();\r\n// };\r\n\r\n// const handleProceed = async (orderId, orderDate) => {\r\n//   const choice = window.prompt(\"Choose Delivery Type: fast / normal\")?.toLowerCase();\r\n//   let deliveryDate = new Date(orderDate);\r\n\r\n//   if (choice === \"fast\") deliveryDate.setDate(deliveryDate.getDate() + 3);\r\n//   else if (choice === \"normal\") deliveryDate.setDate(deliveryDate.getDate() + 7);\r\n//   else return alert(\"Invalid choice\");\r\n\r\n//   await fetch(`http://localhost:8000/updateorder/${orderId}`, {\r\n//     method: \"PUT\",\r\n//     headers: { \"Content-Type\": \"application/json\" },\r\n//     body: JSON.stringify({\r\n//       deliveryStatus: \"Shipped\",\r\n//       deliveryDate\r\n//     })\r\n//   });\r\n//   getAllOrders();\r\n// };\r\n\r\n\r\n\r\n\r\n//   // Get unique user emails from orders\r\n//   const uniqueEmails = [...new Set(orders.map(order => order.userId?.email).filter(Boolean))];\r\n\r\n//   return (\r\n//     <div className=\"container mt-4\">\r\n//       <h2>{selectedEmail ? `Orders of ${selectedEmail}` : 'All Orders'}</h2>\r\n\r\n//       {selectedEmail && (\r\n//         <button className=\"btn btn-secondary mb-3\" onClick={getAllOrders}>\r\n//           ← Back\r\n//         </button>\r\n//       )}\r\n\r\n//       {!selectedEmail && uniqueEmails.length > 0 && (\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\"><b>Select by Email:</b></label>\r\n//           <select\r\n//             className=\"form-select\"\r\n//             value={selectedEmail}\r\n//             onChange={(e) => getOrdersByEmail(e.target.value)}\r\n//           >\r\n//             <option value=\"\">-- Select an email --</option>\r\n//             {uniqueEmails.map((email) => (\r\n//               <option key={email} value={email}>{email}</option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n//       )}\r\n\r\n//       {message && <div className=\"alert alert-info\">{message}</div>}\r\n\r\n//       {orders.length === 0 ? (\r\n//         <p>No orders found.</p>\r\n//       ) : (\r\n//         orders.map((order, index) => (\r\n//           <div key={order._id} className=\"card mb-3 p-3 shadow-sm\">\r\n//             <p><b>Service:</b> Order {index + 1} - {order.serviceName}</p>\r\n//             <p><b>Date & Time:</b> {new Date(order.serviceDate).toLocaleString()}</p>\r\n//         <p>   <strong>Status:</strong>{order.deliveryStatus}</p> \r\n//         <p><strong>Delivery Date:</strong>{new Date (order.deliveryDate).toLocaleDateString()}</p>\r\n//             <p><b>Amount:</b> ₹{order.totalAmount}</p>\r\n\r\n//             <p>\r\n//               <b>User:</b> {order.userId?.name || 'N/A'} (\r\n//               <span\r\n//                 style={{ color: 'blue', cursor: 'pointer' }}\r\n//                 onClick={() => getOrdersByEmail(order.userId?.email)}\r\n//               >\r\n//                 {order.userId?.email || 'N/A'}\r\n//               </span>\r\n//               )\r\n//             </p>\r\n//             <p><b>Status:</b> {order.deliveryStatus}</p>\r\n\r\n//             {order.deliveryStatus === 'Pending' ? (\r\n//               <div className=\"d-flex gap-2\">\r\n//                 <button className=\"btn btn-success btn-sm\" onClick={() => handleReject(order._id, 'Approved')}>\r\n//                   Approve\r\n//                 </button>\r\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => handleReject(order._id, 'Rejected')}\r\n//                   disabled={order.deliveryStatus === 'Rejected'}>\r\n//                   Reject\r\n//                 </button>\r\n//               </div>\r\n//             ) : (\r\n//               <span className={`badge ${order.deliveryStatus === 'Approved' ? 'bg-success' : 'bg-danger'}`}>\r\n//                 {order.deliveryStatus}\r\n//               </span>\r\n//             )}\r\n//             <button className='btn btn-success' onClick={()=>handleProceed(order._id,order.serviceDate)}\r\n//               disabled={order.deliveryStatus===\"Shipped\" || order.deliveryStatus===\"Rejected\"}>\r\n              \r\n//             </button>\r\n\r\n//             <ul className=\"order-items mt-2\">\r\n//               {order.cartItems.map((item, idx) => (\r\n//                 <li key={idx} className=\"mb-1\">\r\n//                   <strong>{item.name}</strong> - ₹{item.price} x {item.quantity}\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         ))\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Getorders;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport api from '../axios';\r\n\r\nconst Getorders = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [selectedEmail, setSelectedEmail] = useState('');\r\nconst [loading,setLoading]=useState(false)\r\nconst [loadingOrderId,setLoadingOrderId]=useState('')\r\n  useEffect(() => {\r\n    getAllOrders();\r\n  }, []);\r\n\r\n  const getAllOrders = async () => {\r\n    try {\r\n      // Use axios to get all orders\r\n      const res = await api.get('/getorders');\r\n      \r\n      // Set the orders state with the data from the response\r\n      setOrders(res.data.orders || []);\r\n      setSelectedEmail('');\r\n    } catch (err) {\r\n      console.log(\"Error:\", err);  // Handle error\r\n    }\r\n  };\r\n  \r\n\r\n  const getOrdersByEmail = async (email) => {\r\n    try {\r\n      // Use axios to get the orders by email\r\n      const res = await api.get(`/ordersbyemail/${email}`);\r\n      \r\n      // Set the orders state with the data from the response\r\n      setOrders(res.data.orders || []);\r\n      setSelectedEmail(email);\r\n    } catch (err) {\r\n      console.log(\"Error:\", err);  // Handle error\r\n    }\r\n  };\r\n  \r\n  const handleReject = async (orderId) => {\r\n    setLoadingOrderId(orderId);\r\n  \r\n    try {\r\n      // Use axios to send the PUT request\r\n      await api.put(`/updateorder/${orderId}`, {\r\n        deliveryStatus: 'Rejected',\r\n      });\r\n      \r\n      // Call the function to get all orders after the update\r\n      await getAllOrders();\r\n    } catch (error) {\r\n      console.error(\"Error rejecting the order:\", error);  // Handle error\r\n    }\r\n  \r\n    setLoadingOrderId(null);\r\n  };\r\n\r\n  const handleProceed = async (orderId, orderDate, deliveryStatus) => {\r\n    setLoadingOrderId(orderId);\r\n    let deliveryDate = new Date(orderDate);\r\n  \r\n    if (deliveryStatus === 'fast') {\r\n      deliveryDate.setDate(deliveryDate.getDate() + 2);\r\n    } else {\r\n      deliveryDate.setDate(deliveryDate.getDate() + 4);\r\n    }\r\n  \r\n    try {\r\n      // Use axios to send the PUT request\r\n      await api.put(`/updateorder/${orderId}`, {\r\n        deliveryStatus: 'Shipped',\r\n        deliveryDate,\r\n      });\r\n      \r\n      // Call the function to get all orders after the update\r\n      await getAllOrders();\r\n    } catch (error) {\r\n      console.error(\"Error updating the order:\", error);  // Handle error\r\n    }\r\n  \r\n    setLoadingOrderId(null);\r\n  };\r\n  \r\n\r\n  const uniqueEmails = [...new Set(orders.map(order => order.userId?.email).filter(Boolean))];\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h2>{selectedEmail ? `Orders of ${selectedEmail}` : 'All Orders'}</h2>\r\n\r\n      {selectedEmail && (\r\n        <button className=\"btn btn-secondary mb-3\" onClick={getAllOrders}>\r\n          ← Back\r\n        </button>\r\n      )}\r\n\r\n      {!selectedEmail && uniqueEmails.length > 0 && (\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\"><b>Select by Email:</b></label>\r\n          <select\r\n            className=\"form-select\"\r\n            value={selectedEmail}\r\n            onChange={(e) => getOrdersByEmail(e.target.value)}\r\n          >\r\n            <option value=\"\">-- Select an email --</option>\r\n            {uniqueEmails.map((email) => (\r\n              <option key={email} value={email}>{email}</option>\r\n            ))}\r\n          </select>\r\n          {loading && <div className='text-center md-3 text-white'>Please Wait</div>}\r\n        </div>\r\n      )}\r\n\r\n      {message && <div className=\"alert alert-info\">{message}</div>}\r\n\r\n      {orders.length === 0 ? (\r\n        <p>No orders found.</p>\r\n      ) : (\r\n        orders.map((order, index) => (\r\n          <div key={order._id} className=\"card mb-3 p-3 shadow-sm\">\r\n            <p><b>Service:</b> Order {index + 1} - {order.serviceName}</p>\r\n            <p><b>Date & Time:</b> {new Date(order.serviceDate).toLocaleString()}</p>\r\n            <p><strong>Status:</strong> {order.deliveryStatus}</p>\r\n            <p><strong>Delivery Date:</strong> {order.deliveryDate ? new Date(order.deliveryDate).toLocaleDateString() : 'N/A'}</p>\r\n            <p><b>Amount:</b> ₹{order.totalAmount}</p>\r\n            <p>\r\n              <b>User:</b> {order.userId?.name || 'N/A'} (\r\n              <span\r\n                style={{ color: 'blue', cursor: 'pointer' }}\r\n                onClick={() => getOrdersByEmail(order.userId?.email)}\r\n              >\r\n                {order.userId?.email || 'N/A'}\r\n              </span>\r\n              )\r\n            </p>\r\n\r\n            {order.deliveryStatus === 'Pending' && (\r\n              <div className=\"d-flex gap-2\">\r\n                <button className=\"btn btn-success btn-sm\" onClick={() => handleProceed(order._id, order.serviceDate,order.deliveryStatus)}\r\n                  disabled={loadingOrderId === order._id || order.deliveryStatus===\"Shipped\"}>\r\n                  {loadingOrderId === order._id ? 'Processing...' : 'Approve'}\r\n                </button>\r\n                <button className=\"btn btn-danger btn-sm\" onClick={() => handleReject(order._id)}\r\n                  disabled={loadingOrderId === order._id || order.deliveryStatus===\"Rejected\"} >\r\n                    {loadingOrderId === order._id ? 'Rejecting...' : 'Reject'}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {order.deliveryStatus !== 'Pending' && (\r\n              <span className={`badge ${order.deliveryStatus === 'Shipped' ? 'bg-success' : 'bg-danger'}`}>\r\n                {order.deliveryStatus}\r\n              </span>\r\n            )}\r\n\r\n            <ul className=\"order-items mt-2\">\r\n              {order.cartItems.map((item, idx) => (\r\n                <li key={idx}>\r\n                  <strong>{item.name}</strong> - ₹{item.price} x {item.quantity}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Getorders;\r\n"],"mappings":";;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAsBA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACY,OAAO,EAACC,UAAU,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}