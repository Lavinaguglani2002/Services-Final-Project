{"ast":null,"code":"import React,{useState,useEffect}from'react';const Typewriter=_ref=>{let{texts,delay,switchDelay,onUpdate}=_ref;const[currentText,setCurrentText]=useState('');const[currentIndex,setCurrentIndex]=useState(0);const[textIndex,setTextIndex]=useState(0);// Tracks which text is being typed\n//ðŸ“Œ currentText â†’ Yeh currently typed text store karega.\n//ðŸ“Œ currentIndex â†’ Yeh currently typed character ka index track karega.\n//ðŸ“Œ textIndex â†’ Yeh kaunsa placeholder text type ho raha hai, yeh track karega.\nuseEffect(()=>{if(currentIndex<texts[textIndex].length){const timeout=setTimeout(()=>{const updatedText=texts[textIndex].slice(0,currentIndex+1);setCurrentText(updatedText);setCurrentIndex(prevIndex=>prevIndex+1);if(onUpdate){onUpdate(updatedText);}},delay);return()=>clearTimeout(timeout);}else{// Wait for `switchDelay` before changing text\nconst switchTimeout=setTimeout(()=>{setCurrentIndex(0);setTextIndex(prevTextIndex=>(prevTextIndex+1)%texts.length);setCurrentText('');// Reset text for typewriter effect\n},switchDelay);//ðŸ“Œ Agar pura ek text complete ho gaya hai, toh:\n//2 sec (switchDelay) rukega.\n//TextIndex badal dega (Agla text start karega).\n//setCurrentText('') se text reset ho jayega.\nreturn()=>clearTimeout(switchTimeout);}},[currentIndex,textIndex,delay,switchDelay,texts,onUpdate]);return null;// UI pe kuch show nahi hoga, bas placeholder update hoga\n};export default Typewriter;","map":{"version":3,"names":["React","useState","useEffect","Typewriter","_ref","texts","delay","switchDelay","onUpdate","currentText","setCurrentText","currentIndex","setCurrentIndex","textIndex","setTextIndex","length","timeout","setTimeout","updatedText","slice","prevIndex","clearTimeout","switchTimeout","prevTextIndex"],"sources":["C:/Users/Allied/Desktop/Serviceproject/client/src/Admin/Typewriter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Typewriter = ({ texts, delay, switchDelay, onUpdate }) => {\r\n  const [currentText, setCurrentText] = useState('');\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [textIndex, setTextIndex] = useState(0); // Tracks which text is being typed\r\n  //ðŸ“Œ currentText â†’ Yeh currently typed text store karega.\r\n//ðŸ“Œ currentIndex â†’ Yeh currently typed character ka index track karega.\r\n//ðŸ“Œ textIndex â†’ Yeh kaunsa placeholder text type ho raha hai, yeh track karega.\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (currentIndex < texts[textIndex].length) {\r\n      const timeout = setTimeout(() => {\r\n        const updatedText = texts[textIndex].slice(0, currentIndex + 1);\r\n        setCurrentText(updatedText);\r\n        setCurrentIndex(prevIndex => prevIndex + 1);\r\n\r\n        if (onUpdate) {\r\n          onUpdate(updatedText);\r\n        }\r\n      }, delay);\r\n\r\n      return () => clearTimeout(timeout);\r\n    } else {\r\n      // Wait for `switchDelay` before changing text\r\n      const switchTimeout = setTimeout(() => {\r\n        setCurrentIndex(0);\r\n        setTextIndex((prevTextIndex) => (prevTextIndex + 1) % texts.length);\r\n        setCurrentText(''); // Reset text for typewriter effect\r\n      }, switchDelay);\r\n      //ðŸ“Œ Agar pura ek text complete ho gaya hai, toh:\r\n\r\n      //2 sec (switchDelay) rukega.\r\n      \r\n      //TextIndex badal dega (Agla text start karega).\r\n      \r\n      //setCurrentText('') se text reset ho jayega.\r\n      \r\n      \r\n\r\n      return () => clearTimeout(switchTimeout); \r\n    }\r\n  }, [currentIndex, textIndex, delay, switchDelay, texts, onUpdate]);\r\n\r\n  return null; // UI pe kuch show nahi hoga, bas placeholder update hoga\r\n};\r\n\r\nexport default Typewriter;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAElD,KAAM,CAAAC,UAAU,CAAGC,IAAA,EAA6C,IAA5C,CAAEC,KAAK,CAAEC,KAAK,CAAEC,WAAW,CAAEC,QAAS,CAAC,CAAAJ,IAAA,CACzD,KAAM,CAACK,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACU,YAAY,CAAEC,eAAe,CAAC,CAAGX,QAAQ,CAAC,CAAC,CAAC,CACnD,KAAM,CAACY,SAAS,CAAEC,YAAY,CAAC,CAAGb,QAAQ,CAAC,CAAC,CAAC,CAAE;AAC/C;AACF;AACA;AAIEC,SAAS,CAAC,IAAM,CACd,GAAIS,YAAY,CAAGN,KAAK,CAACQ,SAAS,CAAC,CAACE,MAAM,CAAE,CAC1C,KAAM,CAAAC,OAAO,CAAGC,UAAU,CAAC,IAAM,CAC/B,KAAM,CAAAC,WAAW,CAAGb,KAAK,CAACQ,SAAS,CAAC,CAACM,KAAK,CAAC,CAAC,CAAER,YAAY,CAAG,CAAC,CAAC,CAC/DD,cAAc,CAACQ,WAAW,CAAC,CAC3BN,eAAe,CAACQ,SAAS,EAAIA,SAAS,CAAG,CAAC,CAAC,CAE3C,GAAIZ,QAAQ,CAAE,CACZA,QAAQ,CAACU,WAAW,CAAC,CACvB,CACF,CAAC,CAAEZ,KAAK,CAAC,CAET,MAAO,IAAMe,YAAY,CAACL,OAAO,CAAC,CACpC,CAAC,IAAM,CACL;AACA,KAAM,CAAAM,aAAa,CAAGL,UAAU,CAAC,IAAM,CACrCL,eAAe,CAAC,CAAC,CAAC,CAClBE,YAAY,CAAES,aAAa,EAAK,CAACA,aAAa,CAAG,CAAC,EAAIlB,KAAK,CAACU,MAAM,CAAC,CACnEL,cAAc,CAAC,EAAE,CAAC,CAAE;AACtB,CAAC,CAAEH,WAAW,CAAC,CACf;AAEA;AAEA;AAEA;AAIA,MAAO,IAAMc,YAAY,CAACC,aAAa,CAAC,CAC1C,CACF,CAAC,CAAE,CAACX,YAAY,CAAEE,SAAS,CAAEP,KAAK,CAAEC,WAAW,CAAEF,KAAK,CAAEG,QAAQ,CAAC,CAAC,CAElE,MAAO,KAAI,CAAE;AACf,CAAC,CAED,cAAe,CAAAL,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}