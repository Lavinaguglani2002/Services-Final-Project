{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst Typewriter = ({\n  texts,\n  delay,\n  switchDelay,\n  onUpdate\n}) => {\n  _s();\n  const [currentText, setCurrentText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [textIndex, setTextIndex] = useState(0); // Tracks which text is being typed\n  //ðŸ“Œ currentText â†’ Yeh currently typed text store karega.\n  //ðŸ“Œ currentIndex â†’ Yeh currently typed character ka index track karega.\n  //ðŸ“Œ textIndex â†’ Yeh kaunsa placeholder text type ho raha hai, yeh track karega.\n\n  useEffect(() => {\n    if (currentIndex < texts[textIndex].length) {\n      const timeout = setTimeout(() => {\n        const updatedText = texts[textIndex].slice(0, currentIndex + 1);\n        setCurrentText(updatedText);\n        setCurrentIndex(prevIndex => prevIndex + 1);\n        if (onUpdate) {\n          onUpdate(updatedText);\n        }\n      }, delay);\n      return () => clearTimeout(timeout);\n    } else {\n      // Wait for `switchDelay` before changing text\n      const switchTimeout = setTimeout(() => {\n        setCurrentIndex(0);\n        setTextIndex(prevTextIndex => (prevTextIndex + 1) % texts.length);\n        setCurrentText(''); // Reset text for typewriter effect\n      }, switchDelay);\n      //ðŸ“Œ Agar pura ek text complete ho gaya hai, toh:\n\n      //2 sec (switchDelay) rukega.\n\n      //TextIndex badal dega (Agla text start karega).\n\n      //setCurrentText('') se text reset ho jayega.\n\n      return () => clearTimeout(switchTimeout);\n    }\n  }, [currentIndex, textIndex, delay, switchDelay, texts, onUpdate]);\n  return null; // UI pe kuch show nahi hoga, bas placeholder update hoga\n};\n_s(Typewriter, \"jzNDwsFypyNLotCdrjhD79xAWpg=\");\n_c = Typewriter;\nexport default Typewriter;\nvar _c;\n$RefreshReg$(_c, \"Typewriter\");","map":{"version":3,"names":["React","useState","useEffect","Typewriter","texts","delay","switchDelay","onUpdate","_s","currentText","setCurrentText","currentIndex","setCurrentIndex","textIndex","setTextIndex","length","timeout","setTimeout","updatedText","slice","prevIndex","clearTimeout","switchTimeout","prevTextIndex","_c","$RefreshReg$"],"sources":["C:/Users/Allied/Desktop/Serviceproject/client/src/Admin/Typewriter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Typewriter = ({ texts, delay, switchDelay, onUpdate }) => {\r\n  const [currentText, setCurrentText] = useState('');\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [textIndex, setTextIndex] = useState(0); // Tracks which text is being typed\r\n  //ðŸ“Œ currentText â†’ Yeh currently typed text store karega.\r\n//ðŸ“Œ currentIndex â†’ Yeh currently typed character ka index track karega.\r\n//ðŸ“Œ textIndex â†’ Yeh kaunsa placeholder text type ho raha hai, yeh track karega.\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (currentIndex < texts[textIndex].length) {\r\n      const timeout = setTimeout(() => {\r\n        const updatedText = texts[textIndex].slice(0, currentIndex + 1);\r\n        setCurrentText(updatedText);\r\n        setCurrentIndex(prevIndex => prevIndex + 1);\r\n\r\n        if (onUpdate) {\r\n          onUpdate(updatedText);\r\n        }\r\n      }, delay);\r\n\r\n      return () => clearTimeout(timeout);\r\n    } else {\r\n      // Wait for `switchDelay` before changing text\r\n      const switchTimeout = setTimeout(() => {\r\n        setCurrentIndex(0);\r\n        setTextIndex((prevTextIndex) => (prevTextIndex + 1) % texts.length);\r\n        setCurrentText(''); // Reset text for typewriter effect\r\n      }, switchDelay);\r\n      //ðŸ“Œ Agar pura ek text complete ho gaya hai, toh:\r\n\r\n      //2 sec (switchDelay) rukega.\r\n      \r\n      //TextIndex badal dega (Agla text start karega).\r\n      \r\n      //setCurrentText('') se text reset ho jayega.\r\n      \r\n      \r\n\r\n      return () => clearTimeout(switchTimeout); \r\n    }\r\n  }, [currentIndex, textIndex, delay, switchDelay, texts, onUpdate]);\r\n\r\n  return null; // UI pe kuch show nahi hoga, bas placeholder update hoga\r\n};\r\n\r\nexport default Typewriter;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,WAAW;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C;EACF;EACA;;EAIEC,SAAS,CAAC,MAAM;IACd,IAAIS,YAAY,GAAGP,KAAK,CAACS,SAAS,CAAC,CAACE,MAAM,EAAE;MAC1C,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC/B,MAAMC,WAAW,GAAGd,KAAK,CAACS,SAAS,CAAC,CAACM,KAAK,CAAC,CAAC,EAAER,YAAY,GAAG,CAAC,CAAC;QAC/DD,cAAc,CAACQ,WAAW,CAAC;QAC3BN,eAAe,CAACQ,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;QAE3C,IAAIb,QAAQ,EAAE;UACZA,QAAQ,CAACW,WAAW,CAAC;QACvB;MACF,CAAC,EAAEb,KAAK,CAAC;MAET,OAAO,MAAMgB,YAAY,CAACL,OAAO,CAAC;IACpC,CAAC,MAAM;MACL;MACA,MAAMM,aAAa,GAAGL,UAAU,CAAC,MAAM;QACrCL,eAAe,CAAC,CAAC,CAAC;QAClBE,YAAY,CAAES,aAAa,IAAK,CAACA,aAAa,GAAG,CAAC,IAAInB,KAAK,CAACW,MAAM,CAAC;QACnEL,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;MACtB,CAAC,EAAEJ,WAAW,CAAC;MACf;;MAEA;;MAEA;;MAEA;;MAIA,OAAO,MAAMe,YAAY,CAACC,aAAa,CAAC;IAC1C;EACF,CAAC,EAAE,CAACX,YAAY,EAAEE,SAAS,EAAER,KAAK,EAAEC,WAAW,EAAEF,KAAK,EAAEG,QAAQ,CAAC,CAAC;EAElE,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACC,EAAA,CA7CIL,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AA+ChB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}