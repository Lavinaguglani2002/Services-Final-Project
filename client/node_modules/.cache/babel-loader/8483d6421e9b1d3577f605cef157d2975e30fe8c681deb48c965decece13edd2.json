{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// const Getorders = () => {\n//   const [orders, setOrders] = useState([]);\n//   const [message, setMessage] = useState('');\n//   const [selectedEmail, setSelectedEmail] = useState([]);\n//   useEffect(() => {\n//     getAllOrders();\n//   }, []);\n//   const getAllOrders = async () => {\n//     try {\n//       const res = await fetch('http://localhost:8000/getorders', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//       });\n//       const data = await res.json();\n//       setOrders(data.orders || []);\n//       setSelectedEmail('');\n//     } catch (err) {\n//       console.log('Error:', err);\n//     }\n//   };\n//   const getOrdersByEmail = async (email) => {\n//     try {\n//       const res = await fetch(`http://localhost:8000/ordersbyemail/${email}`, {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//       });\n//       const data = await res.json();\n//       setOrders(data.orders || []);\n//       setSelectedEmail(email);\n//     } catch (err) {\n//       console.log('Error:', err);\n//     }\n//   };\n//   // const updateStatus = async (id, status) => {\n//   //   try {\n//   //     const res = await fetch('http://localhost:8000/updateorderstatus', {\n//   //       method: 'PUT',\n//   //       headers: { 'Content-Type': 'application/json' },\n//   //       body: JSON.stringify({ orderId: id, deliveryStatus: status }),\n//   //     });\n//   //     const data = await res.json();\n//   //     if (res.ok) {\n//   //       setMessage(`Order ${status} successfully!`);\n//   //       setOrders((prev) =>\n//   //         prev.map((order) =>\n//   //           order._id === id ? { ...order, deliveryStatus: status } : order\n//   //         )\n//   //       );\n//   //     } else {\n//   //       setMessage(data.message || 'Failed to update.');\n//   //     }\n//   //   } catch (err) {\n//   //     console.log('Error:', err);\n//   //   }\n//   // };\n// //handle proceedd\n// const handleReject = async (orderId) => {\n//   await fetch(`http://localhost:8000/updateorder/${orderId}`, {\n//     method: \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body: JSON.stringify({ deliveryStatus: \"Rejected\" })\n//   });\n//   getAllOrders();\n// };\n// const handleProceed = async (orderId, orderDate) => {\n//   const choice = window.prompt(\"Choose Delivery Type: fast / normal\")?.toLowerCase();\n//   let deliveryDate = new Date(orderDate);\n//   if (choice === \"fast\") deliveryDate.setDate(deliveryDate.getDate() + 3);\n//   else if (choice === \"normal\") deliveryDate.setDate(deliveryDate.getDate() + 7);\n//   else return alert(\"Invalid choice\");\n//   await fetch(`http://localhost:8000/updateorder/${orderId}`, {\n//     method: \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body: JSON.stringify({\n//       deliveryStatus: \"Shipped\",\n//       deliveryDate\n//     })\n//   });\n//   getAllOrders();\n// };\n//   // Get unique user emails from orders\n//   const uniqueEmails = [...new Set(orders.map(order => order.userId?.email).filter(Boolean))];\n//   return (\n//     <div className=\"container mt-4\">\n//       <h2>{selectedEmail ? `Orders of ${selectedEmail}` : 'All Orders'}</h2>\n//       {selectedEmail && (\n//         <button className=\"btn btn-secondary mb-3\" onClick={getAllOrders}>\n//           ← Back\n//         </button>\n//       )}\n//       {!selectedEmail && uniqueEmails.length > 0 && (\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\"><b>Select by Email:</b></label>\n//           <select\n//             className=\"form-select\"\n//             value={selectedEmail}\n//             onChange={(e) => getOrdersByEmail(e.target.value)}\n//           >\n//             <option value=\"\">-- Select an email --</option>\n//             {uniqueEmails.map((email) => (\n//               <option key={email} value={email}>{email}</option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n//       {message && <div className=\"alert alert-info\">{message}</div>}\n//       {orders.length === 0 ? (\n//         <p>No orders found.</p>\n//       ) : (\n//         orders.map((order, index) => (\n//           <div key={order._id} className=\"card mb-3 p-3 shadow-sm\">\n//             <p><b>Service:</b> Order {index + 1} - {order.serviceName}</p>\n//             <p><b>Date & Time:</b> {new Date(order.serviceDate).toLocaleString()}</p>\n//         <p>   <strong>Status:</strong>{order.deliveryStatus}</p> \n//         <p><strong>Delivery Date:</strong>{new Date (order.deliveryDate).toLocaleDateString()}</p>\n//             <p><b>Amount:</b> ₹{order.totalAmount}</p>\n//             <p>\n//               <b>User:</b> {order.userId?.name || 'N/A'} (\n//               <span\n//                 style={{ color: 'blue', cursor: 'pointer' }}\n//                 onClick={() => getOrdersByEmail(order.userId?.email)}\n//               >\n//                 {order.userId?.email || 'N/A'}\n//               </span>\n//               )\n//             </p>\n//             <p><b>Status:</b> {order.deliveryStatus}</p>\n//             {order.deliveryStatus === 'Pending' ? (\n//               <div className=\"d-flex gap-2\">\n//                 <button className=\"btn btn-success btn-sm\" onClick={() => handleReject(order._id, 'Approved')}>\n//                   Approve\n//                 </button>\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => handleReject(order._id, 'Rejected')}\n//                   disabled={order.deliveryStatus === 'Rejected'}>\n//                   Reject\n//                 </button>\n//               </div>\n//             ) : (\n//               <span className={`badge ${order.deliveryStatus === 'Approved' ? 'bg-success' : 'bg-danger'}`}>\n//                 {order.deliveryStatus}\n//               </span>\n//             )}\n//             <button className='btn btn-success' onClick={()=>handleProceed(order._id,order.serviceDate)}\n//               disabled={order.deliveryStatus===\"Shipped\" || order.deliveryStatus===\"Rejected\"}>\n//             </button>\n//             <ul className=\"order-items mt-2\">\n//               {order.cartItems.map((item, idx) => (\n//                 <li key={idx} className=\"mb-1\">\n//                   <strong>{item.name}</strong> - ₹{item.price} x {item.quantity}\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         ))\n//       )}\n//     </div>\n//   );\n// };\n// export default Getorders;\nimport React,{useEffect,useState}from'react';import api from'../axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Getorders=()=>{const[orders,setOrders]=useState([]);const[message,setMessage]=useState('');const[selectedEmail,setSelectedEmail]=useState('');const[loading,setLoading]=useState(false);const[loadingOrderId,setLoadingOrderId]=useState('');useEffect(()=>{getAllOrders();},[]);const getAllOrders=async()=>{try{// Use axios to get all orders\nconst res=await api.get('/getorders');// Set the orders state with the data from the response\nsetOrders(res.data.orders||[]);setSelectedEmail('');}catch(err){console.log(\"Error:\",err);// Handle error\n}};const getOrdersByEmail=async email=>{try{// Use axios to get the orders by email\nconst res=await api.get(`/ordersbyemail/${email}`);// Set the orders state with the data from the response\nsetOrders(res.data.orders||[]);setSelectedEmail(email);}catch(err){console.log(\"Error:\",err);// Handle error\n}};const handleReject=async orderId=>{setLoadingOrderId(orderId);try{// Use axios to send the PUT request\nawait api.put(`/updateorder/${orderId}`,{deliveryStatus:'Rejected'});// Call the function to get all orders after the update\nawait getAllOrders();}catch(error){console.error(\"Error rejecting the order:\",error);// Handle error\n}setLoadingOrderId(null);};const handleProceed=async(orderId,orderDate,deliveryStatus)=>{setLoadingOrderId(orderId);let deliveryDate=new Date(orderDate);if(deliveryStatus==='fast'){deliveryDate.setDate(deliveryDate.getDate()+2);}else{deliveryDate.setDate(deliveryDate.getDate()+4);}try{// Use axios to send the PUT request\nawait api.put(`/updateorder/${orderId}`,{deliveryStatus:'Shipped',deliveryDate});// Call the function to get all orders after the update\nawait getAllOrders();}catch(error){console.error(\"Error updating the order:\",error);// Handle error\n}setLoadingOrderId(null);};const uniqueEmails=[...new Set(orders.map(order=>{var _order$userId;return(_order$userId=order.userId)===null||_order$userId===void 0?void 0:_order$userId.email;}).filter(Boolean))];return/*#__PURE__*/_jsxs(\"div\",{className:\"container mt-4\",children:[/*#__PURE__*/_jsx(\"h2\",{children:selectedEmail?`Orders of ${selectedEmail}`:'All Orders'}),selectedEmail&&/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary mb-3\",onClick:getAllOrders,children:\"\\u2190 Back\"}),!selectedEmail&&uniqueEmails.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form-label\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Select by Email:\"})}),/*#__PURE__*/_jsxs(\"select\",{className:\"form-select\",value:selectedEmail,onChange:e=>getOrdersByEmail(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Select an email --\"}),uniqueEmails.map(email=>/*#__PURE__*/_jsx(\"option\",{value:email,children:email},email))]}),loading&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center md-3 text-white\",children:\"Please Wait\"})]}),message&&/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-info\",children:message}),orders.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"No orders found.\"}):orders.map((order,index)=>{var _order$userId2,_order$userId4;return/*#__PURE__*/_jsxs(\"div\",{className:\"card mb-3 p-3 shadow-sm\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"b\",{children:\"Service:\"}),\" Order \",index+1,\" - \",order.serviceName]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"b\",{children:\"Date & Time:\"}),\" \",new Date(order.serviceDate).toLocaleString()]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Status:\"}),\" \",order.deliveryStatus]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Delivery Date:\"}),\" \",order.deliveryDate?new Date(order.deliveryDate).toLocaleDateString():'N/A']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"b\",{children:\"Amount:\"}),\" \\u20B9\",order.totalAmount]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"b\",{children:\"User:\"}),\" \",((_order$userId2=order.userId)===null||_order$userId2===void 0?void 0:_order$userId2.name)||'N/A',\" (\",/*#__PURE__*/_jsx(\"span\",{style:{color:'blue',cursor:'pointer'},onClick:()=>{var _order$userId3;return getOrdersByEmail((_order$userId3=order.userId)===null||_order$userId3===void 0?void 0:_order$userId3.email);},children:((_order$userId4=order.userId)===null||_order$userId4===void 0?void 0:_order$userId4.email)||'N/A'}),\")\"]}),order.deliveryStatus==='Pending'&&/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex gap-2\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-success btn-sm\",onClick:()=>handleProceed(order._id,order.serviceDate,order.deliveryStatus),disabled:loadingOrderId===order._id||order.deliveryStatus===\"Shipped\",children:loadingOrderId===order._id?'Processing...':'Approve'}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-danger btn-sm\",onClick:()=>handleReject(order._id),disabled:loadingOrderId===order._id||order.deliveryStatus===\"Rejected\",children:loadingOrderId===order._id?'Rejecting...':'Reject'})]}),order.deliveryStatus!=='Pending'&&/*#__PURE__*/_jsx(\"span\",{className:`badge ${order.deliveryStatus==='Shipped'?'bg-success':'bg-danger'}`,children:order.deliveryStatus}),/*#__PURE__*/_jsx(\"ul\",{className:\"order-items mt-2\",children:order.cartItems.map((item,idx)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:item.name}),\" - \\u20B9\",item.price,\" x \",item.quantity]},idx))})]},order._id);})]});};export default Getorders;","map":{"version":3,"names":["React","useEffect","useState","api","jsx","_jsx","jsxs","_jsxs","Getorders","orders","setOrders","message","setMessage","selectedEmail","setSelectedEmail","loading","setLoading","loadingOrderId","setLoadingOrderId","getAllOrders","res","get","data","err","console","log","getOrdersByEmail","email","handleReject","orderId","put","deliveryStatus","error","handleProceed","orderDate","deliveryDate","Date","setDate","getDate","uniqueEmails","Set","map","order","_order$userId","userId","filter","Boolean","className","children","onClick","length","value","onChange","e","target","index","_order$userId2","_order$userId4","serviceName","serviceDate","toLocaleString","toLocaleDateString","totalAmount","name","style","color","cursor","_order$userId3","_id","disabled","cartItems","item","idx","price","quantity"],"sources":["C:/Users/Allied/Desktop/Serviceproject/client/src/Admin/Getorders.js"],"sourcesContent":["\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// const Getorders = () => {\r\n//   const [orders, setOrders] = useState([]);\r\n//   const [message, setMessage] = useState('');\r\n//   const [selectedEmail, setSelectedEmail] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     getAllOrders();\r\n//   }, []);\r\n\r\n//   const getAllOrders = async () => {\r\n//     try {\r\n//       const res = await fetch('http://localhost:8000/getorders', {\r\n//         method: 'GET',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//       });\r\n//       const data = await res.json();\r\n//       setOrders(data.orders || []);\r\n//       setSelectedEmail('');\r\n//     } catch (err) {\r\n//       console.log('Error:', err);\r\n//     }\r\n//   };\r\n\r\n//   const getOrdersByEmail = async (email) => {\r\n//     try {\r\n//       const res = await fetch(`http://localhost:8000/ordersbyemail/${email}`, {\r\n//         method: 'GET',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//       });\r\n//       const data = await res.json();\r\n//       setOrders(data.orders || []);\r\n//       setSelectedEmail(email);\r\n//     } catch (err) {\r\n//       console.log('Error:', err);\r\n//     }\r\n//   };\r\n\r\n//   // const updateStatus = async (id, status) => {\r\n//   //   try {\r\n//   //     const res = await fetch('http://localhost:8000/updateorderstatus', {\r\n//   //       method: 'PUT',\r\n//   //       headers: { 'Content-Type': 'application/json' },\r\n//   //       body: JSON.stringify({ orderId: id, deliveryStatus: status }),\r\n//   //     });\r\n//   //     const data = await res.json();\r\n\r\n//   //     if (res.ok) {\r\n//   //       setMessage(`Order ${status} successfully!`);\r\n//   //       setOrders((prev) =>\r\n//   //         prev.map((order) =>\r\n//   //           order._id === id ? { ...order, deliveryStatus: status } : order\r\n//   //         )\r\n//   //       );\r\n//   //     } else {\r\n//   //       setMessage(data.message || 'Failed to update.');\r\n//   //     }\r\n//   //   } catch (err) {\r\n//   //     console.log('Error:', err);\r\n//   //   }\r\n//   // };\r\n\r\n\r\n// //handle proceedd\r\n\r\n\r\n// const handleReject = async (orderId) => {\r\n//   await fetch(`http://localhost:8000/updateorder/${orderId}`, {\r\n//     method: \"PUT\",\r\n//     headers: { \"Content-Type\": \"application/json\" },\r\n//     body: JSON.stringify({ deliveryStatus: \"Rejected\" })\r\n//   });\r\n//   getAllOrders();\r\n// };\r\n\r\n// const handleProceed = async (orderId, orderDate) => {\r\n//   const choice = window.prompt(\"Choose Delivery Type: fast / normal\")?.toLowerCase();\r\n//   let deliveryDate = new Date(orderDate);\r\n\r\n//   if (choice === \"fast\") deliveryDate.setDate(deliveryDate.getDate() + 3);\r\n//   else if (choice === \"normal\") deliveryDate.setDate(deliveryDate.getDate() + 7);\r\n//   else return alert(\"Invalid choice\");\r\n\r\n//   await fetch(`http://localhost:8000/updateorder/${orderId}`, {\r\n//     method: \"PUT\",\r\n//     headers: { \"Content-Type\": \"application/json\" },\r\n//     body: JSON.stringify({\r\n//       deliveryStatus: \"Shipped\",\r\n//       deliveryDate\r\n//     })\r\n//   });\r\n//   getAllOrders();\r\n// };\r\n\r\n\r\n\r\n\r\n//   // Get unique user emails from orders\r\n//   const uniqueEmails = [...new Set(orders.map(order => order.userId?.email).filter(Boolean))];\r\n\r\n//   return (\r\n//     <div className=\"container mt-4\">\r\n//       <h2>{selectedEmail ? `Orders of ${selectedEmail}` : 'All Orders'}</h2>\r\n\r\n//       {selectedEmail && (\r\n//         <button className=\"btn btn-secondary mb-3\" onClick={getAllOrders}>\r\n//           ← Back\r\n//         </button>\r\n//       )}\r\n\r\n//       {!selectedEmail && uniqueEmails.length > 0 && (\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\"><b>Select by Email:</b></label>\r\n//           <select\r\n//             className=\"form-select\"\r\n//             value={selectedEmail}\r\n//             onChange={(e) => getOrdersByEmail(e.target.value)}\r\n//           >\r\n//             <option value=\"\">-- Select an email --</option>\r\n//             {uniqueEmails.map((email) => (\r\n//               <option key={email} value={email}>{email}</option>\r\n//             ))}\r\n//           </select>\r\n//         </div>\r\n//       )}\r\n\r\n//       {message && <div className=\"alert alert-info\">{message}</div>}\r\n\r\n//       {orders.length === 0 ? (\r\n//         <p>No orders found.</p>\r\n//       ) : (\r\n//         orders.map((order, index) => (\r\n//           <div key={order._id} className=\"card mb-3 p-3 shadow-sm\">\r\n//             <p><b>Service:</b> Order {index + 1} - {order.serviceName}</p>\r\n//             <p><b>Date & Time:</b> {new Date(order.serviceDate).toLocaleString()}</p>\r\n//         <p>   <strong>Status:</strong>{order.deliveryStatus}</p> \r\n//         <p><strong>Delivery Date:</strong>{new Date (order.deliveryDate).toLocaleDateString()}</p>\r\n//             <p><b>Amount:</b> ₹{order.totalAmount}</p>\r\n\r\n//             <p>\r\n//               <b>User:</b> {order.userId?.name || 'N/A'} (\r\n//               <span\r\n//                 style={{ color: 'blue', cursor: 'pointer' }}\r\n//                 onClick={() => getOrdersByEmail(order.userId?.email)}\r\n//               >\r\n//                 {order.userId?.email || 'N/A'}\r\n//               </span>\r\n//               )\r\n//             </p>\r\n//             <p><b>Status:</b> {order.deliveryStatus}</p>\r\n\r\n//             {order.deliveryStatus === 'Pending' ? (\r\n//               <div className=\"d-flex gap-2\">\r\n//                 <button className=\"btn btn-success btn-sm\" onClick={() => handleReject(order._id, 'Approved')}>\r\n//                   Approve\r\n//                 </button>\r\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => handleReject(order._id, 'Rejected')}\r\n//                   disabled={order.deliveryStatus === 'Rejected'}>\r\n//                   Reject\r\n//                 </button>\r\n//               </div>\r\n//             ) : (\r\n//               <span className={`badge ${order.deliveryStatus === 'Approved' ? 'bg-success' : 'bg-danger'}`}>\r\n//                 {order.deliveryStatus}\r\n//               </span>\r\n//             )}\r\n//             <button className='btn btn-success' onClick={()=>handleProceed(order._id,order.serviceDate)}\r\n//               disabled={order.deliveryStatus===\"Shipped\" || order.deliveryStatus===\"Rejected\"}>\r\n              \r\n//             </button>\r\n\r\n//             <ul className=\"order-items mt-2\">\r\n//               {order.cartItems.map((item, idx) => (\r\n//                 <li key={idx} className=\"mb-1\">\r\n//                   <strong>{item.name}</strong> - ₹{item.price} x {item.quantity}\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         ))\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Getorders;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport api from '../axios';\r\n\r\nconst Getorders = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [selectedEmail, setSelectedEmail] = useState('');\r\nconst [loading,setLoading]=useState(false)\r\nconst [loadingOrderId,setLoadingOrderId]=useState('')\r\n  useEffect(() => {\r\n    getAllOrders();\r\n  }, []);\r\n\r\n  const getAllOrders = async () => {\r\n    try {\r\n      // Use axios to get all orders\r\n      const res = await api.get('/getorders');\r\n      \r\n      // Set the orders state with the data from the response\r\n      setOrders(res.data.orders || []);\r\n      setSelectedEmail('');\r\n    } catch (err) {\r\n      console.log(\"Error:\", err);  // Handle error\r\n    }\r\n  };\r\n  \r\n\r\n  const getOrdersByEmail = async (email) => {\r\n    try {\r\n      // Use axios to get the orders by email\r\n      const res = await api.get(`/ordersbyemail/${email}`);\r\n      \r\n      // Set the orders state with the data from the response\r\n      setOrders(res.data.orders || []);\r\n      setSelectedEmail(email);\r\n    } catch (err) {\r\n      console.log(\"Error:\", err);  // Handle error\r\n    }\r\n  };\r\n  \r\n  const handleReject = async (orderId) => {\r\n    setLoadingOrderId(orderId);\r\n  \r\n    try {\r\n      // Use axios to send the PUT request\r\n      await api.put(`/updateorder/${orderId}`, {\r\n        deliveryStatus: 'Rejected',\r\n      });\r\n      \r\n      // Call the function to get all orders after the update\r\n      await getAllOrders();\r\n    } catch (error) {\r\n      console.error(\"Error rejecting the order:\", error);  // Handle error\r\n    }\r\n  \r\n    setLoadingOrderId(null);\r\n  };\r\n\r\n  const handleProceed = async (orderId, orderDate, deliveryStatus) => {\r\n    setLoadingOrderId(orderId);\r\n    let deliveryDate = new Date(orderDate);\r\n  \r\n    if (deliveryStatus === 'fast') {\r\n      deliveryDate.setDate(deliveryDate.getDate() + 2);\r\n    } else {\r\n      deliveryDate.setDate(deliveryDate.getDate() + 4);\r\n    }\r\n  \r\n    try {\r\n      // Use axios to send the PUT request\r\n      await api.put(`/updateorder/${orderId}`, {\r\n        deliveryStatus: 'Shipped',\r\n        deliveryDate,\r\n      });\r\n      \r\n      // Call the function to get all orders after the update\r\n      await getAllOrders();\r\n    } catch (error) {\r\n      console.error(\"Error updating the order:\", error);  // Handle error\r\n    }\r\n  \r\n    setLoadingOrderId(null);\r\n  };\r\n  \r\n\r\n  const uniqueEmails = [...new Set(orders.map(order => order.userId?.email).filter(Boolean))];\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h2>{selectedEmail ? `Orders of ${selectedEmail}` : 'All Orders'}</h2>\r\n\r\n      {selectedEmail && (\r\n        <button className=\"btn btn-secondary mb-3\" onClick={getAllOrders}>\r\n          ← Back\r\n        </button>\r\n      )}\r\n\r\n      {!selectedEmail && uniqueEmails.length > 0 && (\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\"><b>Select by Email:</b></label>\r\n          <select\r\n            className=\"form-select\"\r\n            value={selectedEmail}\r\n            onChange={(e) => getOrdersByEmail(e.target.value)}\r\n          >\r\n            <option value=\"\">-- Select an email --</option>\r\n            {uniqueEmails.map((email) => (\r\n              <option key={email} value={email}>{email}</option>\r\n            ))}\r\n          </select>\r\n          {loading && <div className='text-center md-3 text-white'>Please Wait</div>}\r\n        </div>\r\n      )}\r\n\r\n      {message && <div className=\"alert alert-info\">{message}</div>}\r\n\r\n      {orders.length === 0 ? (\r\n        <p>No orders found.</p>\r\n      ) : (\r\n        orders.map((order, index) => (\r\n          <div key={order._id} className=\"card mb-3 p-3 shadow-sm\">\r\n            <p><b>Service:</b> Order {index + 1} - {order.serviceName}</p>\r\n            <p><b>Date & Time:</b> {new Date(order.serviceDate).toLocaleString()}</p>\r\n            <p><strong>Status:</strong> {order.deliveryStatus}</p>\r\n            <p><strong>Delivery Date:</strong> {order.deliveryDate ? new Date(order.deliveryDate).toLocaleDateString() : 'N/A'}</p>\r\n            <p><b>Amount:</b> ₹{order.totalAmount}</p>\r\n            <p>\r\n              <b>User:</b> {order.userId?.name || 'N/A'} (\r\n              <span\r\n                style={{ color: 'blue', cursor: 'pointer' }}\r\n                onClick={() => getOrdersByEmail(order.userId?.email)}\r\n              >\r\n                {order.userId?.email || 'N/A'}\r\n              </span>\r\n              )\r\n            </p>\r\n\r\n            {order.deliveryStatus === 'Pending' && (\r\n              <div className=\"d-flex gap-2\">\r\n                <button className=\"btn btn-success btn-sm\" onClick={() => handleProceed(order._id, order.serviceDate,order.deliveryStatus)}\r\n                  disabled={loadingOrderId === order._id || order.deliveryStatus===\"Shipped\"}>\r\n                  {loadingOrderId === order._id ? 'Processing...' : 'Approve'}\r\n                </button>\r\n                <button className=\"btn btn-danger btn-sm\" onClick={() => handleReject(order._id)}\r\n                  disabled={loadingOrderId === order._id || order.deliveryStatus===\"Rejected\"} >\r\n                    {loadingOrderId === order._id ? 'Rejecting...' : 'Reject'}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {order.deliveryStatus !== 'Pending' && (\r\n              <span className={`badge ${order.deliveryStatus === 'Shipped' ? 'bg-success' : 'bg-danger'}`}>\r\n                {order.deliveryStatus}\r\n              </span>\r\n            )}\r\n\r\n            <ul className=\"order-items mt-2\">\r\n              {order.cartItems.map((item, idx) => (\r\n                <li key={idx}>\r\n                  <strong>{item.name}</strong> - ₹{item.price} x {item.quantity}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Getorders;\r\n"],"mappings":"AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAsBA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,GAAG,KAAM,UAAU,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3B,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACS,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACW,aAAa,CAAEC,gBAAgB,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACa,OAAO,CAACC,UAAU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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}